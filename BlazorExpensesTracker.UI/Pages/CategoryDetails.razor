@page "/categorydetails"
@page "/categorydetails/{id:int}"
@using Model
@using Interfaces
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager

<div class="modal" tabindex="-1" style="display:block" role="dialog">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h1>CategoryDetails</h1>
			</div>
			<div class="modal-body">
				<EditForm Model="@category" OnValidSubmit="SaveCategory">
					<DataAnnotationsValidator/>
					@*<ValidationSummary/>*@
					<table class="table">
						<tr>
							<td>Name</td>
							<td><input type="text" @bind="category.Name" /> </td>
						</tr>
						<tr>
							<td colspan="2"><ValidationMessage For="@(() => category.Name)"/></td>
						</tr>
						<tr>
							<td colspan="2" style="text-align:center">
								<input type="submit" value="Save" />
								<input type="button" value="Cancel" @onclick="Cancel" />
							</td>
						</tr>
					</table>

				</EditForm>
			</div>
		</div>
	</div>
</div>
@code {
	Category category = new Category();

	[Parameter]
	public int id { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (id > 0)
		{
			category = await CategoryService.GetCategoryDetails(id);
		}
		//NavigationManager.LocationChanged += LocationChanged;
	}

	protected async Task SaveCategory()
	{
		await CategoryService.SaveCategory(category);
		NavigateToCategories();
	}

	public void Cancel()
	{
		NavigateToCategories();
	}

	public void NavigateToCategories()
	{
		NavigationManager.NavigateTo("/categories");
	}

	/*void LocationChanged(object sender, LocationChangedEventArgs e)
	{
		string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "Code";
	}*/
}
